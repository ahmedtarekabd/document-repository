version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: doc_repo_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - doc_repo_network
    healthcheck:
      # test: ["CMD-SHELL", "pg_isready -U docuser -d ${POSTGRES_DB}"]
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: doc_repo_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console
    networks:
      - doc_repo_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: doc_repo_backend
    environment:
      FRONTEND_HOST: ${FRONTEND_HOST}
      VITE_BE_BASE_URL: http://backend:8000/api/
      VITE_BE_VERSION: ${API_VERSION}
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    volumes:
      - ./backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    networks:
      - doc_repo_network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    # command: ["fastapi", "run", "app/main.py", "--host", "0.0.0.0", "--port", "8000"]
    command: ["fastapi", "dev", "app/main.py", "--host", "0.0.0.0", "--port", "8000"]
    develop:
      watch:
          # local path (relative to the compose file) to watch and sync into the container
        - path: ./backend
          action: sync
          target: backend
          # container path to watch; tooling can translate local -> container paths
        - path: /app
          action: sync
          target: backend
          ignore:
            - /app/__pycache__
            - /app/.pytest_cache

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: doc_repo_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - doc_repo_network
    depends_on:
      - backend
    # environment:
    #   - VITE_API_URL=http://localhost:8000
    command: ["npm", "run", "dev", "--host", "0.0.0.0", "--port", "5173"]
    develop:
      watch:
          # local path to watch for frontend changes
        - path: ./frontend
          action: sync
          target: frontend
        - path: /app
          action: sync
          ignore:
            - /app/node_modules
          target: frontend

  # pgAdmin Service
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: doc_repo_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - doc_repo_network
    depends_on:
      - postgres

volumes:
  postgres_data:
  minio_data:

networks:
  doc_repo_network:
    driver: bridge
